/*///////////////////////////////////////////////////////////////////////////////
//
//  System Name : ACR Configuration File
//     Filename : acf_area_onexit.nss
//      Version : 0.1
//         Date : 7/25/06
//       Author : Ronan
//
//  Local Variable Prefix =
//
//
//  Dependencies external of nwscript:
//
//  Description
//  This script calls the ACR's OnAreaExit code, and any custom code a server
//  may need. It is not updated in ACR updates.
//
//  Revision History
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes ////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include "acr_area_i"

////////////////////////////////////////////////////////////////////////////////
// Constants ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

const string AoEPrefix = "010_SEL_PATROL_AOE_";

////////////////////////////////////////////////////////////////////////////////
// Structures //////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Global Variables ////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// The main event handler.
void main();

////////////////////////////////////////////////////////////////////////////////
// Function Definitions ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int NeedsQuestCleanup()
{
	object oPC = GetFirstPC(TRUE);
	while(GetIsObjectValid(oPC))
	{
		if(oPC != GetExitingObject() &&
		   GetArea(oPC) == OBJECT_SELF)
		{
			return FALSE;
		}
		oPC = GetNextPC(TRUE);
	}
	return TRUE;
}

void CleanUpQuest()
{
	int count = 1;
	object oAoE = GetObjectByTag(AoEPrefix + IntToString(count));
	while(GetIsObjectValid(oAoE))
	{
		DestroyObject(oAoE, 0.0f);
		count++;
		oAoE = GetObjectByTag(AoEPrefix + IntToString(count));
	}
}

void main()
{
	ACR_AreaOnExit(); 
	
	if(NeedsQuestCleanup())
		CleanUpQuest();
}*/



////////////////////////////////////////////////////////////////////////////////
//
//  System Name : ACR Configuration File
//     Filename : acf_area_onexit.nss
//      Version : 0.1
//         Date : 7/14/19
//       Author : paazin
//
//  Local Variable Prefix =
//
//
//  Dependencies external of nwscript:
//
//  Description
//  This script calls the ACR's OnAreaExit code, and any custom code a server
//  may need. It is not updated in ACR updates.
//
//  Revision History
//  changed to despawn creatures to prevent them from Camping ATs
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes ////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#include "acr_area_i"
#include "acr_quest_i"

////////////////////////////////////////////////////////////////////////////////
// Constants ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

const string AoEPrefix = "010_SEL_PATROL_AOE_";

////////////////////////////////////////////////////////////////////////////////
// Structures //////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Global Variables ////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function Prototypes /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// The main event handler.
void main();
void ResetQuestCreatures();
void _resetQuestCreature(object oCreature);

////////////////////////////////////////////////////////////////////////////////
// Function Definitions ////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

int NeedsQuestCleanup()
{
    // Clean up quest only if no PCs are within this area
	object oPC = GetFirstPC(TRUE);
	while(GetIsObjectValid(oPC))
	{
		if(oPC != GetExitingObject() &&
		   GetArea(oPC) == OBJECT_SELF)
		{
			return FALSE;
		}
		oPC = GetNextPC(TRUE);
	}
	return TRUE;
}

void CleanUpQuest()
{
	int count = 1;
	object oAoE = GetObjectByTag(AoEPrefix + IntToString(count));
	while(GetIsObjectValid(oAoE))
	{
		DestroyObject(oAoE, 0.0f);
		count++;
		oAoE = GetObjectByTag(AoEPrefix + IntToString(count));
	}
    ResetQuestCreatures();
}

void main()
{
	ACR_AreaOnExit(); 
	
	if(NeedsQuestCleanup())
		CleanUpQuest();
}

void ResetQuestCreatures()
{
    object o;
    for (
        ObjectToInt(o = GetFirstObjectInArea(OBJECT_SELF));
        o != OBJECT_INVALID;
        ObjectToInt(o = GetNextObjectInArea(OBJECT_SELF))
    ) {
        int nType = GetObjectType(o);
   	    if (nType == OBJECT_TYPE_CREATURE) {
            object oPC = GetLocalObject(o, ACR_QST_PC);
            if (GetIsObjectValid(oPC))
                _resetQuestCreature(o);
        }
    }
}

void _resetQuestCreature(object oCreature)
{
    float fDelay = ACR_QST_DESPAWN_RETRY;
    DelayCommand(fDelay, _despawnQuestCreature(oCreature));
}
